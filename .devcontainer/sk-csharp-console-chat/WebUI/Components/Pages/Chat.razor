@page "/chat"
<h3>Chat</h3>

@using DslCopilot.WebUI.Services
@using DslCopilot.WebUI.Data
@inject DslAIService AIService
@inject LanguageService LanguageService


<div style="display: flex; flex-direction: column-reverse;">
 @foreach (var msg in chatMessages.Reverse())
{
    <div style="display: flex; flex-direction: column">
        @((MarkupString)msg.Response)
    </div>
    <div style="background-color: lightblue; margin-left: auto; max-width: 70%; padding: 10px;">@msg.Message (@msg.SelectedLangauge)</div>
}
</div>

<div style="visibility: @SpinnerVisibility">
  <div class="spinner-border" role="status">
    <span class="sr-only"></span>
  </div>
</div>
<div>
    <input style="width: 400px" type="text" @bind="@message" @onkeyup="CheckForEnter" />
</div>
<LanguageSelector OnLanguageChanged="OnLanguageChanged" />
<PromptSelector OnPromptChanged="OnPromptChanged" />

@code {
  private string message;
  private IList<ChatMessage> chatMessages = new List<ChatMessage>();

  private string selectedLanguage = "(none)";

  private string selectedPrompt = "tyler";

  private string SpinnerVisibility = "hidden";

  private DslDef MyDsl = new DslDef
    {
      Name = "MyDsl"
    };


  private async Task OnLanguageChanged(string language)
  {
    selectedLanguage = language;
    var grammarFile = await LanguageService.GetGrammarForLanguage(selectedLanguage);
    MyDsl.AntlrDef = grammarFile;
  }

  private void OnPromptChanged(string prompt)
  { 
    selectedPrompt = prompt;
  }

  private void CheckForEnter(KeyboardEventArgs e)
  {
    if (e.Key == "Enter")
    {
      SendMessage();
    }
  }

  private async Task SendMessage()
  {

    var newMessage = new ChatMessage()
      {
        Message = message,
        Response = string.Empty,
        SelectedLangauge = selectedLanguage
      };

    chatMessages.Add(newMessage);

    // Clear the input field
    message = string.Empty;

    // Call DslAIService to send chat message
    SpinnerVisibility = "visible";
    var response = AIService.AskAI(newMessage.Message, MyDsl.AntlrDef, selectedPrompt);

    string responseString = string.Empty;
    await foreach(var chunk in response)
    {
      responseString += chunk;
      newMessage.Response = Markdig.Markdown.ToHtml(responseString);
      await InvokeAsync(StateHasChanged);
    }

    // newMessage.Response += "<b>Done</b>";
    SpinnerVisibility = "hidden";
    await InvokeAsync(StateHasChanged);

  }
}
